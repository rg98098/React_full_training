Q1:   What is Microservice?
Ans:  Microservice is an approach to building an application trhat breaks functionality into modular components.
      Features
      1. single responsibility
      2. Individual engineering team can manage and deploy
      3. SOC

Q2:   What is Monolith architecture?
Ans:  Monolith architecture means every feature and functionality of an application tightly coupled. Each component
      dependant on each other.

Q3    What is Difference between Monolith and Microservice?
Ans   Monolithic                                               Microservices
   1. Monolithic architecture is built as one large system     Microservices architecture is built as small independent
      and is usually one code-base.                            module based on business functionality
   2. It is not easy to scale based on demand                  It is easy to scale based on demand.
   3. It has shared database                                   Each project and module has their own database
   4. Everything is tightly coupled and depend on each other   Every module and project is independent

Q4    Why do we need a useEffect Hook?
Ans:  React component needs to do something after initial render. It is mostly used for tasks like updating the DOM, 
      fetching data from API end-points, setting up subscriptions or timers, etc can be lead to unwarranted side-effects.


Q5:   What is Optional Chaining?
Ans:  JS knows to implicitly check to be sure object is not null or undefined before attempting to access it. 
      If object is null or undefined, the expression automatically short-circuits, returning undefined. Basically we 
      use it for null checks.

Q6:   What is Shimmer UI?
Ans:  A shimmer UI resembles the page's actual empty boxes structured UI, so users will understand how quickly the 
      web or mobile app will load even before the content has shown up. It gives people an idea of what's about to 
      come and what's happening (it's currently loading) when a page full of content/data takes more than 300-500ms 
      to load.

Q7:   What is the Difference between JS expression and JS statement?
Ans:  statements are the rigid structure that holds our program together, while expressions fill in the details.
      Statements often have "slots" for expressions. We can put any expression we like into those slots
      For example, declaring a variable has an expression slot:

      let hi = /* some expression */;

      We can use any of the expressions:

      let hi = 1;
      let hi = "hello";
      let hi = 5 * 10;
      let hi = num > 100;
      let hi = isHappy ? "üôÇ" : "üôÅ";
      let hi = [1, 2, 3].pop();

      Expressions produce a value, and that value will be passed into the function. Statements don't produce 
      a value, and so they can't be used as function arguments.

Q8:   What is Conditional Rendering, explain with a code example?
Ans:  Conditional rendering is a term to describe the ability to render different user interface (UI) markup 
      if a condition is true or false.
      For example, If we have load any api data in UI then it takes time to fetch API data, till then we can show 
      Shimmer or Loader and once the data is fetched, we can display it.
      
      import Shimmer from "./Shimmer";
      import Body from "./Body";

      {
          isLoading ? <Shimmer/> : <Body />
      }

Q9:   What is CORS?
Ans:  Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate 
      any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources.

Q10:  What is async and await?
Ans:  Async functions can contain zero or more await expressions. Await expressions make promise-returning functions 
      behave as though they're synchronous by suspending execution until the returned promise is fulfilled or rejected.
      The resolved value of the promise is treated as the return value of the await expression. Use of async and await 
      enables the use of ordinary try / catch blocks around asynchronous code.
      The word ‚Äúasync‚Äù before a function means one simple thing: a function always returns a promise. Other values are 
      wrapped in a resolved promise automatically. 

Q11:  What is the use of const json = await data.json(); ?
Ans:  The json() method of the Response interface takes a Response stream and reads it to completion. It returns a 
      promise which resolves with the result of parsing the body text as JSON.
      Note that despite the method being named json(), the result is not JSON but is instead the result of taking 
      JSON as input and parsing it to produce a JavaScript object.

